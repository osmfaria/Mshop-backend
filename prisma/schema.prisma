// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  name         String
  email        String       @unique
  password     String
  cpf          String       @unique
  phone        String       @unique
  birthdate    DateTime?
  description  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  isAdmin      Boolean      @default(false)
  account_type Account_Type @default(BUYER)

  Address     Address?
  Publication Publication[]
  Comment     Comment[]
}

enum Account_Type {
  SELLER
  BUYER
}

model Address {
  id         String   @id @default(uuid())
  address    String
  cep        String
  state      String
  city       String
  number     String
  complement String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Publication {
  id           String       @id @default(uuid())
  type         String
  title        String
  year         String
  milieage     Float
  price        Float
  description  String
  vehicle_type Vehicle_Type @default(CAR)
  is_active    Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  Comment Comment[]
  Image   Image[]
}

enum Vehicle_Type {
  CAR
  MOTORCYCLE
}

model Comment {
  id          String   @id @default(uuid())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  publicationId String
}

model Image {
  id   String @id @default(uuid())
  link String

  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  publicationId String
}
